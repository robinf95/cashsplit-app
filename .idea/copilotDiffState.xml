<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.env.local">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env.local" />
              <option name="originalContent" value="POSTGRES_URL=&quot;postgres://postgres.fedgovdtnecuwywkveou:k85afLYfxzU5Pt59@aws-0-eu-central-1.pooler.supabase.com:6543/postgres?sslmode=require&amp;supa=base-pooler.x&quot;&#10;POSTGRES_USER=&quot;postgres&quot;&#10;POSTGRES_HOST=&quot;db.fedgovdtnecuwywkveou.supabase.co&quot;&#10;SUPABASE_JWT_SECRET=&quot;sPy+pD7RRf1Oi5zs06aU8Nk3Zb3KB29zlGC4vhwpgvrH00aoIVNgBigLknEsyLjY6N4vd8BCecRL/9iOnOf/hg==&quot;&#10;NEXT_PUBLIC_SUPABASE_ANON_KEY=&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZlZGdvdmR0bmVjdXd5d2t2ZW91Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2NjU5NjMsImV4cCI6MjA3MDI0MTk2M30.0VJu25tU_EoyZxuZnEfgwW05jX8lJZtWawlV3cI_5eE&quot;&#10;POSTGRES_PRISMA_URL=&quot;postgres://postgres.fedgovdtnecuwywkveou:k85afLYfxzU5Pt59@aws-0-eu-central-1.pooler.supabase.com:6543/postgres?sslmode=require&amp;pgbouncer=true&quot;&#10;POSTGRES_PASSWORD=&quot;k85afLYfxzU5Pt59&quot;&#10;POSTGRES_DATABASE=&quot;postgres&quot;&#10;SUPABASE_URL=&quot;https://fedgovdtnecuwywkveou.supabase.co&quot;&#10;NEXT_PUBLIC_SUPABASE_URL=&quot;https://fedgovdtnecuwywkveou.supabase.co&quot;&#10;SUPABASE_SERVICE_ROLE_KEY=&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZlZGdvdmR0bmVjdXd5d2t2ZW91Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDY2NTk2MywiZXhwIjoyMDcwMjQxOTYzfQ.OchVoK-GLFnrxxRXYI9v2_KPIm2DLdZqOHDMv4zwWmc&quot;&#10;POSTGRES_URL_NON_POOLING=&quot;postgres://postgres.fedgovdtnecuwywkveou:k85afLYfxzU5Pt59@aws-0-eu-central-1.pooler.supabase.com:5432/postgres?sslmode=require&quot;&#10;&#10;" />
              <option name="updatedContent" value="POSTGRES_URL=&quot;postgres://postgres.fedgovdtnecuwywkveou:k85afLYfxzU5Pt59@aws-0-eu-central-1.pooler.supabase.com:6543/postgres?sslmode=require&amp;supa=base-pooler.x&quot;&#10;POSTGRES_USER=&quot;postgres&quot;&#10;POSTGRES_HOST=&quot;db.fedgovdtnecuwywkveou.supabase.co&quot;&#10;SUPABASE_JWT_SECRET=&quot;sPy+pD7RRf1Oi5zs06aU8Nk3Zb3KB29zlGC4vhwpgvrH00aoIVNgBigLknEsyLjY6N4vd8BCecRL/9iOnOf/hg==&quot;&#10;NEXT_PUBLIC_SUPABASE_ANON_KEY=&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZlZGdvdmR0bmVjdXd5d2t2ZW91Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2NjU5NjMsImV4cCI6MjA3MDI0MTk2M30.0VJu25tU_EoyZxuZnEfgwW05jX8lJZtWawlV3cI_5eE&quot;&#10;POSTGRES_PRISMA_URL=&quot;postgres://postgres.fedgovdtnecuwywkveou:k85afLYfxzU5Pt59@aws-0-eu-central-1.pooler.supabase.com:6543/postgres?sslmode=require&amp;pgbouncer=true&quot;&#10;POSTGRES_PASSWORD=&quot;k85afLYfxzU5Pt59&quot;&#10;POSTGRES_DATABASE=&quot;postgres&quot;&#10;SUPABASE_URL=&quot;https://fedgovdtnecuwywkveou.supabase.co&quot;&#10;NEXT_PUBLIC_SUPABASE_URL=&quot;https://fedgovdtnecuwywkveou.supabase.co&quot;&#10;SUPABASE_SERVICE_ROLE_KEY=&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZlZGdvdmR0bmVjdXd5d2t2ZW91Iiwicm9zZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDY2NTk2MywiZXhwIjoyMDcwMjQxOTYzfQ.OchVoK-GLFnrxxRXYI9v2_KPIm2DLdZqOHDMv4zwWmc&quot;&#10;POSTGRES_URL_NON_POOLING=&quot;postgres://postgres.fedgovdtnecuwywkveou:k85afLYfxzU5Pt59@aws-0-eu-central-1.pooler.supabase.com:5432/postgres?sslmode=require&quot;&#10;&#10;# Clerk Authentication&#10;VITE_CLERK_PUBLISHABLE_KEY=&quot;pk_test_c2hpbmluZy1tYXJ0aW4tMjcuY2xlcmsuYWNjb3VudHMuZGV2&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="originalContent" value="/node_modules&#10;.vercel&#10;" />
              <option name="updatedContent" value="/node_modules&#10;.vercel&#10;&#10;# Environment variables&#10;.env&#10;.env.local&#10;.env.development.local&#10;.env.test.local&#10;.env.production.local&#10;&#10;# Build outputs&#10;dist/&#10;&#10;# IDE&#10;.vscode/&#10;.idea/&#10;&#10;# OS&#10;.DS_Store&#10;Thumbs.db" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/api/_db.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/api/_db.ts" />
              <option name="originalContent" value="import { createPool } from '@vercel/postgres'&#10;export const pool=createPool()&#10;" />
              <option name="updatedContent" value="import { createPool } from '@vercel/postgres'&#10;import { createClient } from '@supabase/supabase-js'&#10;&#10;// Vercel Postgres pool for server-side operations&#10;export const pool = createPool()&#10;&#10;// Supabase client for server-side operations with service role&#10;const supabaseUrl = process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL!&#10;const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!&#10;&#10;export const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {&#10;  auth: {&#10;    autoRefreshToken: false,&#10;    persistSession: false&#10;  }&#10;})&#10;&#10;// Regular Supabase client for server-side operations&#10;const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!&#10;export const supabase = createClient(supabaseUrl, supabaseAnonKey)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;cashsplit-vue-full&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;vite&quot;,&#10;    &quot;build&quot;: &quot;vite build&quot;,&#10;    &quot;preview&quot;: &quot;vite preview&quot;,&#10;    &quot;db:init&quot;: &quot;node ./db/init.mjs&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@clerk/backend&quot;: &quot;^2.7.0&quot;,&#10;    &quot;@clerk/clerk-js&quot;: &quot;^5.14.0&quot;,&#10;    &quot;@clerk/vue&quot;: &quot;^1.9.3&quot;,&#10;    &quot;@supabase/supabase-js&quot;: &quot;^2.54.0&quot;,&#10;    &quot;@vercel/node&quot;: &quot;^5.3.11&quot;,&#10;    &quot;@vercel/postgres&quot;: &quot;^0.10.0&quot;,&#10;    &quot;pinia&quot;: &quot;^2.1.7&quot;,&#10;    &quot;vue&quot;: &quot;^3.4.27&quot;,&#10;    &quot;vue-router&quot;: &quot;^4.3.2&quot;,&#10;    &quot;zod&quot;: &quot;^3.23.8&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@types/node&quot;: &quot;^20.11.30&quot;,&#10;    &quot;@vitejs/plugin-vue&quot;: &quot;^5.0.4&quot;,&#10;    &quot;autoprefixer&quot;: &quot;^10.4.19&quot;,&#10;    &quot;postcss&quot;: &quot;^8.4.38&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^3.4.7&quot;,&#10;    &quot;typescript&quot;: &quot;^5.4.5&quot;,&#10;    &quot;vite&quot;: &quot;^5.2.0&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;cashsplit-vue-full&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;engines&quot;: {&#10;    &quot;node&quot;: &quot;18.x&quot;&#10;  },&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;vite&quot;,&#10;    &quot;build&quot;: &quot;vite build&quot;,&#10;    &quot;preview&quot;: &quot;vite preview&quot;,&#10;    &quot;db:init&quot;: &quot;node ./db/init.mjs&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@clerk/backend&quot;: &quot;^2.7.0&quot;,&#10;    &quot;@clerk/clerk-js&quot;: &quot;^5.14.0&quot;,&#10;    &quot;@clerk/vue&quot;: &quot;^1.9.3&quot;,&#10;    &quot;@supabase/supabase-js&quot;: &quot;^2.54.0&quot;,&#10;    &quot;@vercel/node&quot;: &quot;^5.3.11&quot;,&#10;    &quot;@vercel/postgres&quot;: &quot;^0.10.0&quot;,&#10;    &quot;pinia&quot;: &quot;^2.1.7&quot;,&#10;    &quot;vue&quot;: &quot;^3.4.27&quot;,&#10;    &quot;vue-router&quot;: &quot;^4.3.2&quot;,&#10;    &quot;zod&quot;: &quot;^3.23.8&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@types/node&quot;: &quot;^20.11.30&quot;,&#10;    &quot;@vitejs/plugin-vue&quot;: &quot;^5.0.4&quot;,&#10;    &quot;autoprefixer&quot;: &quot;^10.4.19&quot;,&#10;    &quot;postcss&quot;: &quot;^8.4.38&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^3.4.7&quot;,&#10;    &quot;typescript&quot;: &quot;^5.4.5&quot;,&#10;    &quot;vite&quot;: &quot;^5.2.0&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/SignIn.vue">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/SignIn.vue" />
              <option name="originalContent" value="&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { onMounted } from 'vue'&#10;const clerk: any = (window as any).Clerk&#10;onMounted(async () =&gt; { await clerk.openSignIn({}); })&#10;&lt;/script&gt;&#10;&lt;template&gt;&#10;  &lt;div class=&quot;min-h-[60vh] grid place-items-center&quot;&gt;&#10;    &lt;div class=&quot;text-center card&quot;&gt;&#10;      &lt;h2 class=&quot;text-lg font-semibold mb-2&quot;&gt;Anmeldung&lt;/h2&gt;&#10;      &lt;p class=&quot;text-sm text-gray-500&quot;&gt;Das Login-Fenster sollte sich Ã¶ffnen. Falls nicht, bitte Popups erlauben.&lt;/p&gt;&#10;      &lt;button class=&quot;btn-primary mt-3&quot; @click=&quot;$forceUpdate()&quot;&gt;Nochmal versuchen&lt;/button&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;" />
              <option name="updatedContent" value="&lt;script setup lang=&quot;ts&quot;&gt;&#10;import { onMounted, ref } from 'vue'&#10;import { useRouter } from 'vue-router'&#10;&#10;const router = useRouter()&#10;const loading = ref(true)&#10;const error = ref('')&#10;&#10;onMounted(async () =&gt; {&#10;  try {&#10;    const clerk = (window as any).Clerk&#10;    &#10;    if (!clerk) {&#10;      error.value = 'Clerk ist nicht verfÃ¼gbar. Bitte laden Sie die Seite neu.'&#10;      loading.value = false&#10;      return&#10;    }&#10;&#10;    // Wait for Clerk to be fully loaded&#10;    if (!clerk.loaded) {&#10;      await new Promise(resolve =&gt; {&#10;        const checkLoaded = () =&gt; {&#10;          if (clerk.loaded) {&#10;            resolve(true)&#10;          } else {&#10;            setTimeout(checkLoaded, 100)&#10;          }&#10;        }&#10;        checkLoaded()&#10;      })&#10;    }&#10;&#10;    // If user is already signed in, redirect to groups&#10;    if (clerk.user) {&#10;      router.push('/groups')&#10;      return&#10;    }&#10;&#10;    // Open sign in modal&#10;    await clerk.openSignIn({&#10;      routing: 'hash',&#10;      afterSignInUrl: '/groups',&#10;      afterSignUpUrl: '/groups'&#10;    })&#10;    &#10;    loading.value = false&#10;  } catch (err) {&#10;    console.error('Sign in error:', err)&#10;    error.value = 'Fehler beim Laden der Anmeldung. Bitte versuchen Sie es erneut.'&#10;    loading.value = false&#10;  }&#10;})&#10;&#10;const retrySignIn = async () =&gt; {&#10;  error.value = ''&#10;  loading.value = true&#10;  &#10;  try {&#10;    const clerk = (window as any).Clerk&#10;    if (clerk) {&#10;      await clerk.openSignIn({&#10;        routing: 'hash',&#10;        afterSignInUrl: '/groups',&#10;        afterSignUpUrl: '/groups'&#10;      })&#10;    }&#10;    loading.value = false&#10;  } catch (err) {&#10;    console.error('Retry sign in error:', err)&#10;    error.value = 'Fehler beim Laden der Anmeldung. Bitte versuchen Sie es erneut.'&#10;    loading.value = false&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;template&gt;&#10;  &lt;div class=&quot;min-h-[60vh] grid place-items-center&quot;&gt;&#10;    &lt;div class=&quot;text-center card max-w-md mx-auto p-6&quot;&gt;&#10;      &lt;h2 class=&quot;text-lg font-semibold mb-4&quot;&gt;Anmeldung&lt;/h2&gt;&#10;      &#10;      &lt;div v-if=&quot;loading&quot; class=&quot;text-sm text-gray-500&quot;&gt;&#10;        &lt;div class=&quot;animate-pulse&quot;&gt;Lade Anmeldung...&lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;div v-else-if=&quot;error&quot; class=&quot;text-sm&quot;&gt;&#10;        &lt;p class=&quot;text-red-600 mb-4&quot;&gt;{{ error }}&lt;/p&gt;&#10;        &lt;button class=&quot;btn-primary&quot; @click=&quot;retrySignIn&quot;&gt;&#10;          Nochmal versuchen&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;      &#10;      &lt;div v-else class=&quot;text-sm text-gray-500&quot;&gt;&#10;        &lt;p class=&quot;mb-4&quot;&gt;Das Login-Fenster sollte sich Ã¶ffnen. Falls nicht, bitte Popups erlauben.&lt;/p&gt;&#10;        &lt;button class=&quot;btn-primary&quot; @click=&quot;retrySignIn&quot;&gt;&#10;          Anmeldung Ã¶ffnen&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/supabase.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/supabase.ts" />
              <option name="updatedContent" value="import { createClient } from '@supabase/supabase-js'&#10;&#10;const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://fedgovdtnecuwywkveou.supabase.co'&#10;const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZlZGdvdmR0bmVjdXd5d2t2ZW91Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2NjU5NjMsImV4cCI6MjA3MDI0MTk2M30.0VJu25tU_EoyZxuZnEfgwW05jX8lJZtWawlV3cI_5eE'&#10;&#10;export const supabase = createClient(supabaseUrl, supabaseAnonKey)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main.ts" />
              <option name="originalContent" value="import './app.css'&#10;&#10;import { Clerk } from '@clerk/clerk-js'&#10;import router from &quot;./router&quot;;&#10;import {createPinia} from &quot;pinia&quot;;&#10;import {createApp, h} from &quot;vue&quot;;&#10;import App from &quot;./App.vue&quot;;&#10;&#10;async function initializeApp() {&#10;  const clerkPubKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY&#10;&#10;  if (!clerkPubKey) {&#10;    console.error('VITE_CLERK_PUBLISHABLE_KEY is not defined')&#10;    return&#10;  }&#10;&#10;  try {&#10;    const clerk = new Clerk(clerkPubKey)&#10;    await clerk.load()&#10;    ;(window as any).Clerk = clerk&#10;&#10;    const app = createApp({ render: () =&gt; h(App) })&#10;    app.use(createPinia())&#10;    app.use(router)&#10;    app.mount('#app')&#10;&#10;    console.log('Clerk initialized successfully')&#10;  } catch (error) {&#10;    console.error('Failed to initialize Clerk:', error)&#10;  }&#10;}&#10;&#10;initializeApp()&#10;&#10;if ('serviceWorker' in navigator) {&#10;  window.addEventListener('load', () =&gt; {&#10;    navigator.serviceWorker.register('/service-worker.js').catch(console.error)&#10;  })&#10;}" />
              <option name="updatedContent" value="import './app.css'&#10;&#10;import { Clerk } from '@clerk/clerk-js'&#10;import router from &quot;./router&quot;;&#10;import {createPinia} from &quot;pinia&quot;;&#10;import {createApp} from &quot;vue&quot;;&#10;import App from &quot;./App.vue&quot;;&#10;&#10;async function initializeApp() {&#10;  const clerkPubKey = (import.meta as any).env.VITE_CLERK_PUBLISHABLE_KEY&#10;  &#10;  if (!clerkPubKey) {&#10;    console.error('VITE_CLERK_PUBLISHABLE_KEY is not defined')&#10;    return&#10;  }&#10;  &#10;  try {&#10;    const clerk = new Clerk(clerkPubKey)&#10;    await clerk.load()&#10;    ;(window as any).Clerk = clerk&#10;&#10;    const app = createApp(App)&#10;    app.use(createPinia())&#10;    app.use(router)&#10;    app.mount('#app')&#10;    &#10;    console.log('Clerk initialized successfully')&#10;  } catch (error) {&#10;    console.error('Failed to initialize Clerk:', error)&#10;  }&#10;}&#10;&#10;initializeApp()&#10;&#10;if ('serviceWorker' in navigator) {&#10;  window.addEventListener('load', () =&gt; {&#10;    navigator.serviceWorker.register('/service-worker.js').catch(console.error)&#10;  })&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/router.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/router.ts" />
              <option name="originalContent" value="import { createRouter, createWebHistory } from 'vue-router'&#10;import GroupSelect from './components/GroupSelect.vue'&#10;import ExpenseList from './components/ExpenseList.vue'&#10;import SignIn from './components/SignIn.vue'&#10;&#10;const routes = [&#10;  { path: '/signin', component: SignIn },&#10;  { path: '/', redirect: '/groups' },&#10;  { path: '/groups', component: GroupSelect, meta: { requiresAuth: true } },&#10;  { path: '/groups/:id', component: ExpenseList, meta: { requiresAuth: true } },&#10;]&#10;&#10;const router = createRouter({ history: createWebHistory(), routes })&#10;&#10;router.beforeEach(async (to, from, next) =&gt; {&#10;  const clerk = (window as any).Clerk&#10;  if (to.meta.requiresAuth &amp;&amp; !clerk?.user) return next('/signin')&#10;  next()&#10;})&#10;&#10;export default router" />
              <option name="updatedContent" value="import { createRouter, createWebHistory } from 'vue-router'&#10;import GroupSelect from './components/GroupSelect.vue'&#10;import ExpenseList from './components/ExpenseList.vue'&#10;import SignIn from './components/SignIn.vue'&#10;&#10;const routes = [&#10;  { path: '/signin', component: SignIn },&#10;  { path: '/', redirect: '/groups' },&#10;  { path: '/groups', component: GroupSelect, meta: { requiresAuth: true } },&#10;  { path: '/groups/:id', component: ExpenseList, meta: { requiresAuth: true } },&#10;]&#10;&#10;const router = createRouter({ history: createWebHistory(), routes })&#10;&#10;router.beforeEach(async (to, from, next) =&gt; {&#10;  const clerk = (window as any).Clerk&#10;  &#10;  // Wait for Clerk to be fully loaded&#10;  if (!clerk) {&#10;    return next()&#10;  }&#10;  &#10;  // Check if route requires authentication&#10;  if (to.meta.requiresAuth) {&#10;    // Wait for user state to be determined&#10;    if (clerk.loaded &amp;&amp; !clerk.user) {&#10;      return next('/signin')&#10;    }&#10;  }&#10;  &#10;  next()&#10;})&#10;&#10;export default router" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/vercel.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/vercel.json" />
              <option name="originalContent" value="{&#10;  &quot;functions&quot;: {&#10;    &quot;api/**/*.ts&quot;: {&#10;      &quot;runtime&quot;: &quot;@vercel/node@3.0.7&quot;&#10;    }&#10;  },&#10;  &quot;build&quot;: {&#10;    &quot;env&quot;: {&#10;      &quot;VITE_SUPABASE_URL&quot;: &quot;https://fedgovdtnecuwywkveou.supabase.co&quot;,&#10;      &quot;VITE_SUPABASE_ANON_KEY&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZlZGdvdmR0bmVjdXd5d2t2ZW91Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2NjU5NjMsImV4cCI6MjA3MDI0MTk2M30.0VJu25tU_EoyZxuZnEfgwW05jX8lJZtWawlV3cI_5eE&quot;&#10;    }&#10;  },&#10;  &quot;buildCommand&quot;: &quot;pnpm run build&quot;,&#10;  &quot;installCommand&quot;: &quot;pnpm install&quot;,&#10;  &quot;outputDirectory&quot;: &quot;dist&quot;,&#10;  &quot;nodeVersion&quot;: &quot;18.x&quot;&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;functions&quot;: {&#10;    &quot;api/**/*.ts&quot;: {&#10;      &quot;runtime&quot;: &quot;@vercel/node@3.0.7&quot;&#10;    }&#10;  },&#10;  &quot;build&quot;: {&#10;    &quot;env&quot;: {&#10;      &quot;VITE_SUPABASE_URL&quot;: &quot;https://fedgovdtnecuwywkveou.supabase.co&quot;,&#10;      &quot;VITE_SUPABASE_ANON_KEY&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZlZGdvdmR0bmVjdXd5d2t2ZW91Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2NjU5NjMsImV4cCI6MjA3MDI0MTk2M30.0VJu25tU_EoyZxuZnEfgwW05jX8lJZtWawlV3cI_5eE&quot;&#10;    }&#10;  },&#10;  &quot;buildCommand&quot;: &quot;pnpm run build&quot;,&#10;  &quot;installCommand&quot;: &quot;pnpm install&quot;,&#10;  &quot;outputDirectory&quot;: &quot;dist&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/vite.config.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/vite.config.ts" />
              <option name="originalContent" value="import { defineConfig } from 'vite'&#10;import vue from '@vitejs/plugin-vue'&#10;&#10;export default defineConfig({&#10;  plugins: [vue()],&#10;  server: { port: 5173 }&#10;" />
              <option name="updatedContent" value="import { defineConfig } from 'vite'&#10;import vue from '@vitejs/plugin-vue'&#10;&#10;export default defineConfig({&#10;  plugins: [vue()],&#10;  server: { &#10;    port: 5173,&#10;    proxy: {&#10;      '/api': {&#10;        target: 'http://localhost:3000',&#10;        changeOrigin: true,&#10;        rewrite: (path) =&gt; path.replace(/^\/api/, '/api')&#10;      }&#10;    }&#10;  },&#10;  define: {&#10;    // Expose environment variables to the client&#10;    __SUPABASE_URL__: JSON.stringify(process.env.VITE_SUPABASE_URL),&#10;    __SUPABASE_ANON_KEY__: JSON.stringify(process.env.VITE_SUPABASE_ANON_KEY),&#10;  }&#10;})" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
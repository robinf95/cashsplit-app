<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env" />
              <option name="updatedContent" value="# Supabase configuration for Vite (client-side)&#10;VITE_SUPABASE_URL=&quot;https://fedgovdtnecuwywkveou.supabase.co&quot;&#10;VITE_SUPABASE_ANON_KEY=&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZlZGdvdmR0bmVjdXd5d2t2ZW91Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2NjU5NjMsImV4cCI6MjA3MDI0MTk2M30.0VJu25tU_EoyZxuZnEfgwW05jX8lJZtWawlV3cI_5eE&quot;&#10;&#10;# Server-side environment variables&#10;POSTGRES_URL=&quot;postgres://postgres.fedgovdtnecuwywkveou:k85afLYfxzU5Pt59@aws-0-eu-central-1.pooler.supabase.com:6543/postgres?sslmode=require&amp;supa=base-pooler.x&quot;&#10;POSTGRES_USER=&quot;postgres&quot;&#10;POSTGRES_HOST=&quot;db.fedgovdtnecuwywkveou.supabase.co&quot;&#10;POSTGRES_PASSWORD=&quot;k85afLYfxzU5Pt59&quot;&#10;POSTGRES_DATABASE=&quot;postgres&quot;&#10;POSTGRES_PRISMA_URL=&quot;postgres://postgres.fedgovdtnecuwywkveou:k85afLYfxzU5Pt59@aws-0-eu-central-1.pooler.supabase.com:6543/postgres?sslmode=require&amp;pgbouncer=true&quot;&#10;POSTGRES_URL_NON_POOLING=&quot;postgres://postgres.fedgovdtnecuwywkveou:k85afLYfxzU5Pt59@aws-0-eu-central-1.pooler.supabase.com:5432/postgres?sslmode=require&quot;&#10;&#10;# Supabase server-side keys&#10;SUPABASE_URL=&quot;https://fedgovdtnecuwywkveou.supabase.co&quot;&#10;SUPABASE_JWT_SECRET=&quot;sPy+pD7RRf1Oi5zs06aU8Nk3Zb3KB29zlGC4vhwpgvrH00aoIVNgBigLknEsyLjY6N4vd8BCecRL/9iOnOf/hg==&quot;&#10;SUPABASE_SERVICE_ROLE_KEY=&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZlZGdvdmR0bmVjdXd5d2t2ZW91Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDY2NTk2MywiZXhwIjoyMDcwMjQxOTYzfQ.OchVoK-GLFnrxxRXYI9v2_KPIm2DLdZqOHDMv4zwWmc&quot;&#10;NEXT_PUBLIC_SUPABASE_ANON_KEY=&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZlZGdvdmR0bmVjdXd5d2t2ZW91Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2NjU5NjMsImV4cCI6MjA3MDI0MTk2M30.0VJu25tU_EoyZxuZnEfgwW05jX8lJZtWawlV3cI_5eE&quot;&#10;NEXT_PUBLIC_SUPABASE_URL=&quot;https://fedgovdtnecuwywkveou.supabase.co&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.env.local">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env.local" />
              <option name="updatedContent" value="POSTGRES_URL=&quot;postgres://postgres.fedgovdtnecuwywkveou:k85afLYfxzU5Pt59@aws-0-eu-central-1.pooler.supabase.com:6543/postgres?sslmode=require&amp;supa=base-pooler.x&quot;&#10;POSTGRES_USER=&quot;postgres&quot;&#10;POSTGRES_HOST=&quot;db.fedgovdtnecuwywkveou.supabase.co&quot;&#10;SUPABASE_JWT_SECRET=&quot;sPy+pD7RRf1Oi5zs06aU8Nk3Zb3KB29zlGC4vhwpgvrH00aoIVNgBigLknEsyLjY6N4vd8BCecRL/9iOnOf/hg==&quot;&#10;NEXT_PUBLIC_SUPABASE_ANON_KEY=&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZlZGdvdmR0bmVjdXd5d2t2ZW91Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2NjU5NjMsImV4cCI6MjA3MDI0MTk2M30.0VJu25tU_EoyZxuZnEfgwW05jX8lJZtWawlV3cI_5eE&quot;&#10;POSTGRES_PRISMA_URL=&quot;postgres://postgres.fedgovdtnecuwywkveou:k85afLYfxzU5Pt59@aws-0-eu-central-1.pooler.supabase.com:6543/postgres?sslmode=require&amp;pgbouncer=true&quot;&#10;POSTGRES_PASSWORD=&quot;k85afLYfxzU5Pt59&quot;&#10;POSTGRES_DATABASE=&quot;postgres&quot;&#10;SUPABASE_URL=&quot;https://fedgovdtnecuwywkveou.supabase.co&quot;&#10;NEXT_PUBLIC_SUPABASE_URL=&quot;https://fedgovdtnecuwywkveou.supabase.co&quot;&#10;SUPABASE_SERVICE_ROLE_KEY=&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZlZGdvdmR0bmVjdXd5d2t2ZW91Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDY2NTk2MywiZXhwIjoyMDcwMjQxOTYzfQ.OchVoK-GLFnrxxRXYI9v2_KPIm2DLdZqOHDMv4zwWmc&quot;&#10;POSTGRES_URL_NON_POOLING=&quot;postgres://postgres.fedgovdtnecuwywkveou:k85afLYfxzU5Pt59@aws-0-eu-central-1.pooler.supabase.com:5432/postgres?sslmode=require&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/api/_db.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/api/_db.ts" />
              <option name="originalContent" value="import { createPool } from '@vercel/postgres'&#10;export const pool=createPool()&#10;" />
              <option name="updatedContent" value="import { createPool } from '@vercel/postgres'&#10;import { createClient } from '@supabase/supabase-js'&#10;&#10;// Vercel Postgres pool for server-side operations&#10;export const pool = createPool()&#10;&#10;// Supabase client for server-side operations with service role&#10;const supabaseUrl = process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL!&#10;const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!&#10;&#10;export const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {&#10;  auth: {&#10;    autoRefreshToken: false,&#10;    persistSession: false&#10;  }&#10;})&#10;&#10;// Regular Supabase client for server-side operations&#10;const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!&#10;export const supabase = createClient(supabaseUrl, supabaseAnonKey)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/supabase-service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/supabase-service.ts" />
              <option name="updatedContent" value="import { supabase } from '../lib/supabase'&#10;&#10;// Database types for better TypeScript support&#10;export interface Group {&#10;  id: string&#10;  user_id: string&#10;  name: string&#10;  currency: string&#10;  created_at: string&#10;}&#10;&#10;export interface Expense {&#10;  id: string&#10;  user_id: string&#10;  group_id: string&#10;  amount: number&#10;  payer: string&#10;  for_members: string[]&#10;  note?: string&#10;  date: string&#10;  currency?: string&#10;}&#10;&#10;// Client-side database operations using Supabase&#10;export class SupabaseService {&#10;  // Groups operations&#10;  static async getGroups(userId: string): Promise&lt;Group[]&gt; {&#10;    const { data, error } = await supabase&#10;      .from('groups')&#10;      .select('id, name, currency, created_at')&#10;      .eq('user_id', userId)&#10;      .order('created_at', { ascending: false })&#10;    &#10;    if (error) throw error&#10;    return data || []&#10;  }&#10;&#10;  static async createGroup(userId: string, name: string, currency: string = 'EUR'): Promise&lt;string&gt; {&#10;    const { data, error } = await supabase&#10;      .from('groups')&#10;      .insert([{ user_id: userId, name, currency }])&#10;      .select('id')&#10;      .single()&#10;    &#10;    if (error) throw error&#10;    return data.id&#10;  }&#10;&#10;  static async deleteGroup(groupId: string, userId: string): Promise&lt;void&gt; {&#10;    const { error } = await supabase&#10;      .from('groups')&#10;      .delete()&#10;      .eq('id', groupId)&#10;      .eq('user_id', userId)&#10;    &#10;    if (error) throw error&#10;  }&#10;&#10;  // Expenses operations&#10;  static async getExpenses(groupId: string): Promise&lt;Expense[]&gt; {&#10;    const { data, error } = await supabase&#10;      .from('expenses')&#10;      .select('*')&#10;      .eq('group_id', groupId)&#10;      .order('date', { ascending: false })&#10;    &#10;    if (error) throw error&#10;    return data || []&#10;  }&#10;&#10;  static async createExpense(expense: Omit&lt;Expense, 'id' | 'date'&gt;): Promise&lt;string&gt; {&#10;    const { data, error } = await supabase&#10;      .from('expenses')&#10;      .insert([expense])&#10;      .select('id')&#10;      .single()&#10;    &#10;    if (error) throw error&#10;    return data.id&#10;  }&#10;&#10;  static async deleteExpense(expenseId: string, userId: string): Promise&lt;void&gt; {&#10;    const { error } = await supabase&#10;      .from('expenses')&#10;      .delete()&#10;      .eq('id', expenseId)&#10;      .eq('user_id', userId)&#10;    &#10;    if (error) throw error&#10;  }&#10;&#10;  // Real-time subscriptions&#10;  static subscribeToGroupExpenses(groupId: string, callback: (expense: Expense) =&gt; void) {&#10;    return supabase&#10;      .channel(`group-${groupId}`)&#10;      .on(&#10;        'postgres_changes',&#10;        {&#10;          event: '*',&#10;          schema: 'public',&#10;          table: 'expenses',&#10;          filter: `group_id=eq.${groupId}`&#10;        },&#10;        (payload) =&gt; {&#10;          if (payload.eventType === 'INSERT') {&#10;            callback(payload.new as Expense)&#10;          }&#10;        }&#10;      )&#10;      .subscribe()&#10;  }&#10;&#10;  static subscribeToUserGroups(userId: string, callback: (group: Group) =&gt; void) {&#10;    return supabase&#10;      .channel(`user-groups-${userId}`)&#10;      .on(&#10;        'postgres_changes',&#10;        {&#10;          event: '*',&#10;          schema: 'public',&#10;          table: 'groups',&#10;          filter: `user_id=eq.${userId}`&#10;        },&#10;        (payload) =&gt; {&#10;          if (payload.eventType === 'INSERT') {&#10;            callback(payload.new as Group)&#10;          }&#10;        }&#10;      )&#10;      .subscribe()&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/supabase.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/supabase.ts" />
              <option name="updatedContent" value="import { createClient } from '@supabase/supabase-js'&#10;&#10;const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://fedgovdtnecuwywkveou.supabase.co'&#10;const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZlZGdvdmR0bmVjdXd5d2t2ZW91Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2NjU5NjMsImV4cCI6MjA3MDI0MTk2M30.0VJu25tU_EoyZxuZnEfgwW05jX8lJZtWawlV3cI_5eE'&#10;&#10;export const supabase = createClient(supabaseUrl, supabaseAnonKey)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/vercel.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/vercel.json" />
              <option name="originalContent" value="{&#10;  &quot;env&quot;: {&#10;    &quot;POSTGRES_URL&quot;: &quot;@postgres_url&quot;,&#10;    &quot;POSTGRES_USER&quot;: &quot;@postgres_user&quot;,&#10;    &quot;POSTGRES_HOST&quot;: &quot;@postgres_host&quot;,&#10;    &quot;POSTGRES_PASSWORD&quot;: &quot;@postgres_password&quot;,&#10;    &quot;POSTGRES_DATABASE&quot;: &quot;@postgres_database&quot;,&#10;    &quot;POSTGRES_PRISMA_URL&quot;: &quot;@postgres_prisma_url&quot;,&#10;    &quot;POSTGRES_URL_NON_POOLING&quot;: &quot;@postgres_url_non_pooling&quot;,&#10;    &quot;SUPABASE_URL&quot;: &quot;@supabase_url&quot;,&#10;    &quot;SUPABASE_JWT_SECRET&quot;: &quot;@supabase_jwt_secret&quot;,&#10;    &quot;SUPABASE_SERVICE_ROLE_KEY&quot;: &quot;@supabase_service_role_key&quot;,&#10;    &quot;NEXT_PUBLIC_SUPABASE_ANON_KEY&quot;: &quot;@next_public_supabase_anon_key&quot;,&#10;    &quot;NEXT_PUBLIC_SUPABASE_URL&quot;: &quot;@next_public_supabase_url&quot;&#10;  },&#10;  &quot;build&quot;: {&#10;    &quot;env&quot;: {&#10;      &quot;VITE_SUPABASE_URL&quot;: &quot;@supabase_url&quot;,&#10;      &quot;VITE_SUPABASE_ANON_KEY&quot;: &quot;@next_public_supabase_anon_key&quot;&#10;    }&#10;  }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;functions&quot;: {&#10;    &quot;api/**/*.ts&quot;: {&#10;      &quot;runtime&quot;: &quot;@vercel/node@3.0.7&quot;&#10;    }&#10;  },&#10;  &quot;build&quot;: {&#10;    &quot;env&quot;: {&#10;      &quot;VITE_SUPABASE_URL&quot;: &quot;https://fedgovdtnecuwywkveou.supabase.co&quot;,&#10;      &quot;VITE_SUPABASE_ANON_KEY&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZlZGdvdmR0bmVjdXd5d2t2ZW91Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2NjU5NjMsImV4cCI6MjA3MDI0MTk2M30.0VJu25tU_EoyZxuZnEfgwW05jX8lJZtWawlV3cI_5eE&quot;&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/vite.config.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/vite.config.ts" />
              <option name="originalContent" value="import { defineConfig } from 'vite'&#10;import vue from '@vitejs/plugin-vue'&#10;&#10;export default defineConfig({&#10;  plugins: [vue()],&#10;  server: { port: 5173 }&#10;})" />
              <option name="updatedContent" value="import { defineConfig } from 'vite'&#10;import vue from '@vitejs/plugin-vue'&#10;&#10;export default defineConfig({&#10;  plugins: [vue()],&#10;  server: { &#10;    port: 5173,&#10;    proxy: {&#10;      '/api': {&#10;        target: 'http://localhost:3000',&#10;        changeOrigin: true,&#10;        rewrite: (path) =&gt; path.replace(/^\/api/, '/api')&#10;      }&#10;    }&#10;  },&#10;  define: {&#10;    // Expose environment variables to the client&#10;    __SUPABASE_URL__: JSON.stringify(process.env.VITE_SUPABASE_URL),&#10;    __SUPABASE_ANON_KEY__: JSON.stringify(process.env.VITE_SUPABASE_ANON_KEY),&#10;  }&#10;})" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
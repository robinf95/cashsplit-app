<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/api/_verify.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/api/_verify.ts" />
              <option name="originalContent" value="import type { VercelRequest, VercelResponse } from '@vercel/node'&#10;import { createClerkClient } from '@clerk/backend'&#10;&#10;const clerk = createClerkClient({ secretKey: process.env.CLERK_SECRET_KEY || '' })&#10;&#10;export async function verifyClerk(req: VercelRequest, res: VercelResponse) {&#10;  try {&#10;    const authHeader = req.headers.authorization || ''&#10;    const token = authHeader.replace(/^Bearer\s+/i, '')&#10;    if (!token) { res.status(401).json({ error: 'missing token' }); return null }&#10;    const session = await clerk.sessions.verifyToken(token, { secretKey: process.env.CLERK_SECRET_KEY || '' })&#10;    return { userId: session.userId }&#10;  } catch (e) {&#10;    res.status(401).json({ error: 'unauthorized' }); return null&#10;  }&#10;}" />
              <option name="updatedContent" value="import type { VercelRequest, VercelResponse } from '@vercel/node'&#10;import { verifyToken } from '@clerk/backend'&#10;&#10;export async function verifyClerk(req: VercelRequest, res: VercelResponse) {&#10;  try {&#10;    const authHeader = req.headers.authorization || ''&#10;    const token = authHeader.replace(/^Bearer\s+/i, '')&#10;    if (!token) { res.status(401).json({ error: 'missing token' }); return null }&#10;    const payload = await verifyToken(token, { secretKey: process.env.CLERK_SECRET_KEY || '' })&#10;    return { userId: payload.sub }&#10;  } catch (e) {&#10;    res.status(401).json({ error: 'unauthorized' }); return null&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>